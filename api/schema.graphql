# Define custom scalar for representing dates
scalar GraphQLDate

# Define the possible employee types
enum EmployeeType {
  FullTime
  PartTime
  Contract
  Seasonal
}

# Define the possible employee titles
enum Title {
  Employee
  Manager
  Director
  VP
}

# Define the possible employee departments
enum Department {
  IT
  Marketing
  HR
  Engineering
}

# Define the possible employee statuses
enum CurrentStatus {
  Working
  Retired
}

type TimeLeftForRetirement {
  years: Int!
  months: Int!
  days: Int!
}

# Employee object type
type Employee {
  _id: ID!
  FirstName: String!
  LastName: String!
  Age: Int!
  DateOfJoining: GraphQLDate!
  Title: Title!
  Department: Department!
  EmployeeType: EmployeeType!
  CurrentStatus: CurrentStatus!
  upcomingRetirement: GraphQLDate!
  timeLeftForRetirement:  TimeLeftForRetirement

}

# Input type for creating an employee
input EmployeeInput {
  FirstName: String!
  LastName: String!
  Age: Int!
  Title: Title!
  Department: Department!
  EmployeeType: EmployeeType!
  DateOfJoining: GraphQLDate!
  CurrentStatus: CurrentStatus!
}

input EmployeeUpdateInputs { 
   FirstName: String!
  LastName: String!
  Age: Int!
  Title: Title!
  Department: Department!
  EmployeeType: EmployeeType!
  DateOfJoining: GraphQLDate!
  CurrentStatus: CurrentStatus!
}

# Query type
type Query {
  employeeList(EmployeeType: String, filterOption: String): [Employee]!
  employeeById(id: ID!): Employee 
}

# Mutation type
type Mutation {
  employeeAdd(employee: EmployeeInput!): Employee!
  employeeDelete(id: ID!): Boolean
  update(id:ID! employee: EmployeeUpdateInputs!):Employee!
}
